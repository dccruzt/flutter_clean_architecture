// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_clean_architecture/test/ui/controller/vehicles_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_clean_architecture/domain/entity/current_selection_entity.dart'
    as _i7;
import 'package:flutter_clean_architecture/domain/entity/vehicle_entity.dart'
    as _i5;
import 'package:flutter_clean_architecture/domain/repository/app_vehicles_repository.dart'
    as _i2;
import 'package:flutter_clean_architecture/domain/use_case/get_vehicles_use_case.dart'
    as _i3;
import 'package:flutter_clean_architecture/domain/use_case/manage_current_selection_use_case.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppVehiclesRepository_0 extends _i1.SmartFake
    implements _i2.AppVehiclesRepository {
  _FakeAppVehiclesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetVehiclesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVehiclesUseCase extends _i1.Mock
    implements _i3.GetVehiclesUseCase {
  MockGetVehiclesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppVehiclesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAppVehiclesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AppVehiclesRepository);
  @override
  _i4.Future<List<_i5.VehicleEntity>?> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<List<_i5.VehicleEntity>?>.value(),
      ) as _i4.Future<List<_i5.VehicleEntity>?>);
}

/// A class which mocks [ManageCurrentSelectionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockManageCurrentSelectionUseCase extends _i1.Mock
    implements _i6.ManageCurrentSelectionUseCase {
  MockManageCurrentSelectionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppVehiclesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAppVehiclesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AppVehiclesRepository);
  @override
  _i4.Stream<_i7.CurrentSelectionEntity?> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i7.CurrentSelectionEntity?>.empty(),
      ) as _i4.Stream<_i7.CurrentSelectionEntity?>);
  @override
  _i4.Future<void> read(String? params) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [params],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> set(_i7.CurrentSelectionEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [params],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
