// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_clean_architecture/test/ui/page/applications_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_clean_architecture/domain/entity/application_entity.dart'
    as _i5;
import 'package:flutter_clean_architecture/domain/repository/app_vehicles_repository.dart'
    as _i2;
import 'package:flutter_clean_architecture/domain/use_case/get_applications_use_case.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppVehiclesRepository_0 extends _i1.SmartFake
    implements _i2.AppVehiclesRepository {
  _FakeAppVehiclesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetApplicationsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetApplicationsUseCase extends _i1.Mock
    implements _i3.GetApplicationsUseCase {
  MockGetApplicationsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppVehiclesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAppVehiclesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AppVehiclesRepository);
  @override
  _i4.Future<List<_i5.ApplicationEntity>?> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<List<_i5.ApplicationEntity>?>.value(),
      ) as _i4.Future<List<_i5.ApplicationEntity>?>);
}
